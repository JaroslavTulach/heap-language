import java.util.stream.Collectors

plugins {
    id 'application'
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "5.2.0"    // build a jar of heap language with all dependencies
}

if (System.getProperty("java.vm.name").contains("HotSpot")) {
    apply plugin: 'jacoco'  // Only measure code coverage on HotSpot JVMs, since jacoco is broken on Graal
}

repositories {
    jcenter()
}

// TODO: Make this script nicer (tests, run, etc. should work fast on all VM versions) - we need to avoid shadow jars and overall make classpaths nicer

application {
    mainClassName = 'com.oracle.truffle.heap.ScriptRunner'
    applicationDefaultJvmArgs = ['-Dtruffle.class.path.append=__APP_HOME__/lib/heap-language.jar:__APP_HOME__/lib/org-netbeans-lib-profiler-RELEASE113.jar']
}

static void replaceInFile(File f, String find, String replace) {
    f.write(f.readLines().stream().map {l -> l.replace(find, replace) }.collect(Collectors.joining("\n")))
};

startScripts {
    doLast {
        // Replace __APP_HOME__ with $APP_HOME (unix) and %APP_HOME% (windows)
        replaceInFile(unixScript, "__APP_HOME__", '$APP_HOME')
        replaceInFile(windowsScript, "__APP_HOME__", '%APP_HOME%')
    }
}

dependencies {
    // JS support in non-Graal VMs
    implementation 'org.graalvm.js:js:20.0.0'
    // Truffle language API
    implementation 'org.graalvm.truffle:truffle-api:20.0.0'
    // Annotation processor to generate language implementation
    implementation 'org.graalvm.truffle:truffle-dsl-processor:20.0.0'
    annotationProcessor 'org.graalvm.truffle:truffle-dsl-processor:20.0.0'
    // Heap analysis library from Netbeans
    implementation 'org.netbeans.modules:org-netbeans-modules-profiler-oql:RELEASE113'

    testImplementation 'junit:junit:4.12'
}

// To test the language, we need to have a fat jar available
test.dependsOn shadowJar

test {
    // Tell Graal to add heap language into our language classpath.
    jvmArgs "-Dtruffle.class.path.append=build/libs/heap-language-all.jar"//, "-XX:+UnlockExperimentalVMOptions", "-XX:+EnableJVMCI", "-Dgraal.Dump=:1", "-Dgraal.PrintGraph=Network"
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardError" //, "standardOut"
    }
}

run {
    /* Pass system property to executing jvm */
    systemProperty "truffle", System.getProperty("truffle")
}